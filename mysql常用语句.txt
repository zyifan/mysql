以数据库bank为例，用户zyj
表person

1、mysql -uroot -p
	
2、创建数据库
	create database bank;

	为数据库创建用户、密码并赋予权限:
	格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”;
	如：
	grant all privileges on bank.* to 'zyj'@'localhost' identified by '123'

3、显示数据库
	show databases;

4、退出数据库
	quit;

5、使用数据库
	use bank;

6、查看当前数据库
	select database();

7、登录时指定数据库
	mysql -uzyj -p bank

8、查看当前时间
	select now();
	select now() from dual;

9、显示mysql支持的所有字符集
	show character set;

10、创建表
	create table person(
		person_id smallint unsigned,
		fname varchar(20),
		lname varchar(20),		
		gender char(1),
		constraint pk_person primary key (person_id)
	);

	constraint pk_person primary key (person_id)
	constraint：约束
	在person_id列上创建名为pk_person的主键约束

	对于gender 性别列：
	定义列时定义检查约束：gender char(1) CHECK (gender IN ('M','F'))
	使用enum字符数据类型：gender ENUM('M','F')

11、查看表结构
	desc person;
	show columns from person;

12、显示表的创建语句
	show create table person;

13、把某一列移动到指定位置：
	ALTER TABLE person MODIFY gender CHAR(1) FIRST; // 末尾也可加 (AFTER 列名) 放在某一列之后 
	ALTER TABLE person MODIFY fname varchar(20) AFTER lname;

14、修改某一列的定义
	ALTER TABLE person MODIFY gender ENUM('M','F'); // 注意由大类型变小类型可能会造成部分数据丢失  

15、修改某一列的列名称：
	CHANGE 既可以改列定义，也可以改列名称
	ALTER TABLE person MODIFY gender womenOrMen  ENUM('M','F'); // 同时修改 

16、select返回执行行数
	insert语句创建行数
	update语句修改行数
	delete语句删除行数

17、查看mysql的版本号
	mysql刚登录进去的时候显示版本号
	status;
	select version();

18、查看mysql变量，如查看安装目录
	show variables like '%datadir%';

19、创建外键
	CREATE TABLE favorite_food
	(person_id SMALLINT UNSIGNED,
	 food VARCHAR(20),
	 CONSTRAINT pk_favorite_food PRIMARY KEY  (person_id,food),
	 CONSTRAINT fk_fav_food_person_id FOREIGN KEY (person_id)
	  REFERENCES person (person_id)
	);

	外键约束：限制了favorite表中 person_id 列的值只能够来自 person 表，通过这种约束，使得当person表中没有 person_id为27的记录时，向favorite_food表中增加person_id为27、喜爱食物为披萨的数据行是不可能的

20、在外部添加外键：
	alter table 表名 add constraint 外键名 foreign key(你的外键字段名) REFERENCES 外表表名(对应的表的主键字段名);
	alter table favorite_food add constraint fk_fav_food_person_id foreign key(person_id) REFERENCES person(person_id)

21、删除外键
	ALTER TABLE 表名 DROP FOREIGN KEY 外键名;
	ALTER TABLE `favorite_food` DROP FOREIGN KEY `fk_fav_food_person_id`

22、在外部添加主键

23、修改数据库和表的字符集
	alter database maildb default character set utf8;//修改数据库的字符集
	alter table mailtable default character set utf8;//修改表的字符集

	如果您想要把表默认的字符集和所有字符列（CHAR, VARCHAR, TEXT）改为新的字符集，应使用如下语句：
	ALTER TABLE tbl_name CONVERT TO CHARACTER SET charset_name;

	警告：前面的操作转换了字符集之间的列类型。如果您有一列使用一种字符集（如latin1），但是存储的值实际上使用了其它的字符集（如utf8），这种情况不是您想要的。此时，您必须对这样的列进行以下操作。
	ALTER TABLE t1 CHANGE c1 c1 BLOB;
	ALTER TABLE t1 CHANGE c1 c1 TEXT CHARACTER SET utf8;
	这种方法能够实现此功能的原因是，当您转换到BLOB列或从BLOB列转换过来时，并没有发生转换。

24、主键添加
	Mysql的两种主键。Primary key 和 not null auto_incriment

	在建立mysql表时，给一个字段添加了主键primary key 
	在insert数据时可以不用insert主键，mysql会自动添加0，但是在第二次insert时没有填写值mysql数据库还是默认添加0，会导致有重复的主键，这是不可以的。所有在定义了primary key时，在insert数据时要给主键填写值。

	在建立mysql表时，给一个字段添加了主键not null auto_increment=1;
	这也是一个主键。时自增长的以1为开始。这个字段是可以不用填写值的，mysql数据库会自动给填写值，不会出现primary key的状况。

	将表的某个字段设置为主键：
	alter table 表名 add primary key（字段名）
	Alter table person add primary key(person_id);
	Alter table person change person_id pid int(10) not null auto_increment=1;

	主键约束，会确保重复主键不会被插入到数据表中
	外键约束，确保favorite_id的值都存在于person表中，
	注意：外键约束只能在使用InnoDB存储引擎创建表时才起作用

25、删除自增长的主键id	
	先删除自增长在删除主键
	Alter table person change person_id pid int(10);//删除自增长
	Alter table person drop primary key;//删除主建

26、临时关闭和开启外键约束
	SET FOREIGN_KEY_CHECKS = 0;//close
	SET FOREIGN_KEY_CHECKS = 1;//open

27、select、insert
	inset into 表名 (列名，...) values (值，...)
	select 列名，... from 表名 where 条件
	select * from tablename

28、排序order by
	select food from favorite_food where person_id=1 order by food;

29、 获取xml格式的数据
	mysqu -uzyj -p --xml bank

30、更新update
	update person set cidy='china',... where person_id=1;
	如果忽略where语句，则会修改所有行数据

31、删除delete
	delete from person where person_id=1;

32、update时显示的指定date格式 str_to_date
	update person set birth_date = str_to_date('DEC-21-1980','%b-%d-%Y') where person_id=1;

	DATE_FORMAT(date,format) 函数用于以不同的格式显示日期/时间数据。
	str_to_date(date,format)的格式同 DATE_FORMAT一样。
	FROM_UNIXTIME( unix_timestamp ，format )；
	

	如：DATE_FORMAT(NOW(),'%b %d %Y %h:%i %p')
		select str_to_date('09/01/2009','%m/%d/%Y')
		select FROM_UNIXTIME(1344887103);  

	date 参数是合法的日期。format 规定日期/时间的输出格式。
	
	可以使用的格式有：
	格式	描述
	%a	缩写星期名(Sun,Mon,...)
	%b	缩写月名(Jan,Feb,...)
	%c	月，数值(0..12)
	%D	带有英文前缀的月中的天
	%d	月的天，数值(00-31)
	%e	月的天，数值(0-31)
	%f	微秒(000000..999999)
	%H	小时 (00-23)
	%h	小时 (01-12)
	%I	小时 (01-12)
	%i	分钟，数值(00-59)
	%j	年的天 (001-366)
	%k	小时 (0-23)
	%l	小时 (1-12)
	%M	月名(January..December)
	%m	月，数值(00-12)
	%p	AM 或 PM
	%r	时间，12-小时（hh:mm:ss AM 或 PM）
	%S	秒(00-59)
	%s	秒(00-59)
	%T	时间, 24-小时 (hh:mm:ss)
	%U	周 (00-53) 星期日是一周的第一天
	%u	周 (00-53) 星期一是一周的第一天
	%V	周 (01-53) 星期日是一周的第一天，与 %X 使用
	%v	周 (01-53) 星期一是一周的第一天，与 %x 使用
	%W	星期名(Sunday..Satuday)
	%w	周的天 （0=星期日, 6=星期六）
	%X	年，其中的星期日是周的第一天，4 位，与 %V 使用
	%x	年，其中的星期一是周的第一天，4 位，与 %v 使用
	%Y	年，4 位
	%y	年，2 位

33、本地导入*.sql文件，执行sql脚本(*.sql),可以有2种方法:
	第一种方法:
	在命令行下(未连接数据库),输入 mysql -h localhost -u root -p123456 < F:\hello world\niuzi.sql (注意路径不用加引号的!!) 回车即可.

	mysql -h 主机地址(本机localhost) -u 用户名(root) -p 数据库名 < 要导入的数据文件(比如是D:\mysql\phpcms.sql)

	比如：mysql -h localhost -u root -p phpcms< D:\mysql\phpcms.sql

	第二种方法:
	在命令行下(已连接数据库,此时的提示符为 mysql> ),输入 source F:\hello world\niuzi.sql (注意路径不用加引号的) 或者 \. F:\hello world\niuzi.sql (注意路径不用加引号的，代码尾部不要加分号;) 回车即可

34、删除表格
	drop table person;

35、query查询字句
	select 确定结果集中应该包含哪些列
	from 指明所要提取数据的表，以及这些表是如何连接的
	where 过滤不需要的数据
	group by 用于对具有相同列值得行进行分组
	having 过滤掉不需要的组
	order by 按一个或多个列，对最后结果集中的行进行排序

	select 列名,字符,表达式,内建函数 from 表名：
	select emp_id,'ACTIVE', emp_id * 3.14159, UPPER(lname) from employee;
	select version(),user(),database();

36、为列定义别名
	select 列名 别名,... from 表名
	如：
	select emp_id,'ACTIVE' statuc, emp_id * 3.14159 empid_x_pi, UPPER(lname) last_name_upper from employee;

	为了使子句更清晰的表示别名，可以在别名前加as
	如：
	select emp_id,'ACTIVE' AS statuc, emp_id * 3.14159 AS empid_x_pi, UPPER(lname) AS last_name_upper from employee;

37、去除重复的行 distinct
	select distinct cust_id from account;

38、表类型
	永久表（使用create table语句创建的表）
	临时表（子查询所返回的表）
	虚拟表（使用create view子句所创建的视图）

	临时表（子查询产生的表）：
	子查询指的是包含在另一个查询中的查询。子查询可以出现在select语句中的各个部分并且被包含在圆括号中。在from子句内，子查询的作用是根据其他查询子句（其中的from子句可以与其他表进行交互）产生的临时表，如：

	针对employee表的子查询返回5个列，而外围的查询获取其中的3列，在外围查询中，通过别名（e）来引用子查询
	select e.emp_id,e.fname,e.lname from (select emp_id,fname,lname,start_date,title from employee) e;

	视图（虚拟表）：
		视图是一种简单的查询机制，不同于表，视图不涉及数据存储，因此不用担心视图会充满磁盘空间。可以先通过命名select语句来创建视图，然后将这个查询保存起来工其他用户使用，而其他用户使用这个视图时就像他们直接查询数据（实际上他们可能不知道自己正在使用一个视图），一旦视图被创建，用户就能把它当做一个表来查询。

	视图是对查询语句的封装；
		视图是存储在数据字典中的查询（一段保存起来的查询语句），它行为表现的像一个表，但实际上并不拥有任何数据（因此成为虚拟表）。当发出一个视图查询时，该查询会被绑定到视图定义上，以产生最终被执行的查询
	
	如定义一个查询（包含一个对内建函数的调用）：
	create view employee_vw AS select emp_id,fname,lname,YEAR(start_date) start_year from employee;

	当视图被创建后，并没有产生或存储任何数据，服务器只是简单地保留改查询以供将来使用。当视图建好之后，可以对其发出查询请求，如：
	select emp_id,start_year from employee_vw;

	查询视图：describe employee_vw;

	视图可更新条件：
		1、没有使用聚合函数（max、min、avg等）
		2、视图没有使用 group by 或 having 子句
		3、select 或 from 子句中不存在子查询，并且 where 子句中的任何子查询都不引用from子句中的表
		3、视图没有使用 union、union all 和 distinct
		4、from子句包括不止一个表或可更新视图
		5、如果有不止一个表或视图，那么from子句只使用内连接



39、表连接
	关键字：join、inner join .. on .. 、inner join .. using (列名字)

	如：
	交叉连接：只使用join/cross join，即 最后结果共有 e.length * d.length 行：
	select e.fname,e.lname,d.name FROM employee e JOIN department d;

	内连接：（两个连接的交集）join on：如果from子句中出现了多个表，那么要求同时包含各表之间的连接条件
	select employee.emp_id,employee.fname,employee.lname, department.name dept_name from employee INNER JOIN department ON employee.dept_id = department.dept_id;
	使用using代替on：
	select employee.emp_id,employee.fname,employee.lname, department.name dept_name from employee INNER JOIN department USING (dept_id);

	inner join交集
	left outer join 左表格全部显示，右表格用null补缺
	right outer join 右表格全部显示，左表格用null补缺

	自外连接：
	//将empolyee表连接到自己而生成雇员和他们主管的列表：
	SELECT e.fname, e.lname, e_mgr.fname mgr_fname, e_mgr.lname mgr_lname FROM employee e INNER JOIN employee e_mgr ON e.superior_emp_id = e_mgr.emp_id;

	//没有主管的雇员将会被遗漏，所以讲内连接改为外链接
	SELECT e.fname, e.lname, e_mgr.fname mgr_fname, e_mgr.lname mgr_lname FROM employee e LEFT OUTER JOIN employee e_mgr ON e.superior_emp_id = e_mgr.emp_id;

	natural join自然连接：
	让数据库服务器去决定需要什么样的连接条件：
	SELECT a.account_id, a.cust_id, c.cust_type_cd, c.fed_id FROM account a NATURAL JOIN custumer c;//但如果两个表没有相同名字的列，自然连接会变成交叉连接


40、表别名
	当单个查询中连接多个表时，需要在select、where、group by、having以及order by子句中指明所引用的是那个表。
	有两种from子句之外引用表的方式：
	（1）使用完整的表名称，如employee.emp_id
	（2）为每个表指定别名，并在查询中需要的地方使用该别名，如：
		select e.emp_id,e.fname,e.lname, d.name dept_name FROM employee e INNER JOIN department d ON e.dept_id = d.dept_id;
		
		为了表单更清晰，可以使用AS关键字：
		select e.emp_id,e.fname,e.lname, d.name dept_name FROM employee AS e INNER JOIN department AS d ON e.dept_id = d.dept_id;

41、查询的过滤条件and、or、not、()、is null、is not null
	操作符：+、—、*、/、=、!=、>、<、<>、like、in、not in、between
	正则：regexp

	注意：
	<>和!= 都表示 不等于
	between：表示>= 和 <=的区间
	in：包含，只需要集合中的一个满足条件
	通配符：_（匹配一个字符） 、 %（匹配任意数目的字符，包括0），配合like操作符使用
	
	如：
	and/or:
	select emp_id,fname,lname,start_date,title FROM employee WHERE (title='Head Teller' AND start_date > '2006-01-01') OR (title='Teller' AND start_date >'2007-01-01');

	between:
	select emp_id,fname,lname,start_date FROM employee WHERE start_date BETWEEN '2005-01-01' AND '2007-01-01';

	in:
	select account_id,product_cd,cust_id,avail_balance FROM account WHERE product_cd IN ('CHK','SAV','CD','MM');

	select account_id,product_cd,cust_id,avail_balance FROM account WHERE product_cd NOT IN ('CHK','SAV','CD','MM');

	select account_id,product_cd,cust_id,avail_balance FROM account WHERE product_cd IN (select product_cd FROM product WHERE product_type+cd = 'ACCOUNT');

	内建函数：
	select emp_id,fname,lname FROM employee WHERE LEFT(lname,1) = 'T';

	通配符：
	F% 以F打头的字符串
	%t 以t结尾的字符串
	%bas% 包含 bas 子字符串的字符串
	_ _ _t_ 包含4个字符且第三个字符为t
	_ _ _-_ _ -_ _ _ _ 包含11个字符且第4、7个字符为破折号的字符串

	select cust_id,fed_id FROM customer WHERE fed_id LIKE '___-__-____';
	select emp_id,fname,lname FROM employee WHERE lname LIKE 'F%' OR lname LIKE 'G%';

	正则表达式：
	select emp_id,fname,lname FROM employee WHERE lname REGEXP '^[FG]';

	null:
	select emp_id,fname,lname,superior_emp_id FROM employee WHERE superior_emp_id IS NULL;
	select emp_id,fname,lname,superior_emp_id FROM employee WHERE superior_emp_id IS NOT NULL;
	select emp_id,fname,lname,superior_emp_id FROM employee WHERE superior_emp_id !=6 OR superior_emp_id IS NULL;

42、分组和条件 group by 和 having 子句
	group by 根据列分组
	having 条件语句
	如：
	select d.name,count(e.emp_id) num_employees FROM department d INNER JOIN employee e ON d.dept_id = e.dept_id GROUP BY d.name HAVING count(e.emp_id)>2;

43、排序：order by	
	如：select open_emp_id,product_cd FROM account ORDER BY open_emp_id,product_cd;

	默认是升序排序asc，降序排序是desc:
	select account_id,product_cd,open_date,avail_balance FROM account ORDER BY avail_balance DESC;

44、排序：根据表达式排序
	根据号码的最后三位数字进行排序
	select cust_id,cust_type_cd,city,state,fed_id FROM customer ORDER BY RIGHT(fed_id,3);

	内建函数 right() 提取fed_id列的最后三个字符，并根据该值对返回的行进行排序

45、根据数组占位符排序
	根据select子句中列的位置号来代替列名排序，如返回第2个和第5个列排序：
	select emp_id,title,start_date,fname,lname FROM employee ORDER BY 2,5;

46、并集 
	union、unionall
	union对连接后的集合排序并去除重复项
	union all保留重复项（所有表的行数之和）

47、交集
	intersect （mysql 6.0不支持交集，sql server支持）
	非交集
	except（mysql 6.0不支持交集，sql server支持）

48、对复合查询结果排序，可以在最后一个查询后面增加 order by 字句，在order by子句中指定要排序的列时，要从复合查询的第一个查询中选择列名
	复合查询的列名一般是相同的，但并不是强制
	SELECT emp_id, assigned_branch_id FROM employee WHERE title = 'Teller' 
	UNION 
	SELECT open_emp_id, open_branch_id FROM account WHERE procuct_cd = 'SAV'
	ORDER BY open_emp_id;

49、复合查询包含3个或3个以上的查询语句，它们以自顶向下的顺序被解析和执行
	
	SELECT coust_id FROM account WHERE product_cd IN ('SAV','MM') 
	UNION ALL 
	SELECT a.cust_id FROM account a INNER JOIN branch b ON a.open_branch_id = b.branch_id WHERE b.name = 'Woburn Branch'
	UNION 
	SELECT cust_id FROM account WHERE avail_balance BETWEEN 500 AND 2500;

	但还需要注意：
	inntersect操作符具有更高的优先级
	可以使用圆括号对多个查询进行封装，以明确指定它们的执行次序，如：

	(SELECT coust_id FROM account WHERE product_cd IN ('SAV','MM') 
	UNION ALL 
	SELECT a.cust_id FROM account a INNER JOIN branch b ON a.open_branch_id = b.branch_id WHERE b.name = 'Woburn Branch')
	INTERSET
	(SELECT cust_id FROM account WHERE avail_balance BETWEEN 500 AND 2500
	EXCEPT
	SELECT cust_id FROM account WHERE product_cd = 'CD' AND avail_balance<1000)

50、字符串中包含单引号，使用双单引号或者'\'进行转义
	UPDATE tbl SET text_fld = 'This string didn''t work, but it dose now';
	UPDATE tbl SET text_fld = 'This string didn\'t work, but it dose now';

	在提取字符串并添加到另一个程序锁读取的文件中时，可使用内建转义函数 quote():
	SELECT quote(text_fld) FROM tbl;

	如果需要国际化，或者处理由键盘字符所构成的字符串（法语、德语、重音等），可以使用内建函数 char() （oracle时chr()函数）
	SELECT CHAR(158, 159, 160, 161, 162, 163, 164, 165, 166)

	如果需要根据字符来查找对应的ASCII码，可以使用ascii()函数，它接收一个字符并返回其序号
	SELECT ASCII('a'); //97

	字符串连接 concat()：
	SELECT CONCAT('danke sch',CHAR(148),'n');  //Oracle使用‘||’连接字符串，sqlServer使用 ‘+’连接字符串
	UPDATE string_tbl SET text_fld = CONCAT(text_fld, ', but now it is longer');
	SELECT CONCAT(fname, ' ', lname, ' has been a ', title, ' since ', start_date) emp_narrative FROM employee WHERE title = 'Teller' OR title = 'Head Teller';
	//Oracle下的写法
	SELECT fname || ' ' || lname || ' has been a ' || title || ' since ' || start_date emp_narrative FROM employee WHERE title = 'Teller' OR title = 'Head Teller';

	在字符串中间增加或替换部分字符 insert(str,startPosition,strLength,newStr)，如果strLength为0，则只插入字符，不进行删除操作：
	SELECT INSERT('goodbye world', 9, 0, 'cruel ') endString;
	SELECT INSERT('goodbye world', 1, 3, 'hello') endString;
	//Oracle、sqlServer中使用replace()、stuff()函数替换insert（）函数

	截取子字符串substring() (Oracle中为substr)，从指定位置开始提取指定数目的字符：
	SELECT SUBSTRING('goodbye cruel world', 9, 5);

	字符串长度 length()：
	SELECT LENGTH(fld) fld_length, LENGTH(vfld) vfld_length, LENGTH(tfld) tfld_length FORM tbl;

	字符在字符串中的位置 position()：
	SELECT POSITION('char' IN vchar_fld) FROM tbl; //如果找不到子串则返回0

	如果希望在字符串中的任意位置开始搜索，而不是仅限于从第一个字符开始，可以使用locate()函数，与position类似，只不过它可以接受可选的第三个参数，该参数用于指定搜索的起始位置
	SELECT LOCATE('is', vchar_fld, 5) FROM tbl;  //Oracle中使用instr()代替position和locate函数，SQLServer中使用charindex函数代替

	字符串比较函数 strcmp() (只有mysql具有此函数oracle和sqlServer里面没有),返回 -1 表示第一个字符在第二个字符之前， 返回 0 表示两个字符相同，返回 1 表示第一个字符串的排序位于第二个字符串之后
	SELECT STRCMP('123','123') 123_123, STRCMP('abcd','xyz') abcd_xyz;

	使用 like 、regexp 操作符来比较字符串。比较操作结果为1（true）、0（false）。
	SELECT name, name LIKE '%ns' ends_in_ns FROM department; //获取所有部门名称，当部门名称以‘ns’结尾时，ends_in_ns字段返回1，否则返回0。
	SELECT cust_id, cust_type_cd, fed_id, fed_id REGEXP '.{3}-.{2}-.{4}' is_ss_no_format FROM customer; //在本查询中，fed_id列的值与社会安全号码的格式相匹配，第四列is_ss_no_format就返回1，否则返回0.


51、 查看数据库的编码方式:
	show variables like 'character%';

52、 数值数据
	SELECT (37 * 59) / (78 - (8*6));

	单参数数值函数: Acos(x)、Asin(x)、Atan(x)、Cos(x)、Cot(x)、Exp(x)、Ln(x)、Sin(x)、Sqrt(x)、Tan(x)
	mod(sum,n) 取余数：SELECT MOD(10,4) //sqlServer使用 % 计算
	pow(x,n) 幂计算x的n次方：SELECT POW(2，8) //sqlServer、Oracle使用 power()代替

	数字精度：
	ceil()、floor()、round()四舍五入、truncate(num,n)截取小数点位数 //Oracle中使用trunc代替truncate，sqlServer中使用ceiling代替ceil

	sign()验证数字的正负 //正数返回1、负数返回-1, 0返回0
	abs() 返回数字的绝对值 

	时间数据：
	查询全局时区和会话时区：
	SELECT @@global.time_zone, @@session.time_zone; //返回结果中的system表明服务器根据数据库所在地使用相应时区设置
	SHOW variables LIKE '%time_zone%';

	改变当前会话的时区设置：
	SET time_zone = 'Europe/Zurich'; //Oracle数据库用户可以使用 ALTER SESSION TIMEZONE = 'Europe/Zurich';

	//下载时区文件地址
	https://dev.mysql.com/downloads/timezones.html

	日期部件：Date(YYYY-MM-DD)、Datetime(YYYY-MM-DD HH:MI:SS)、Timestamp(YYYY-MM-DD HH:MI:SS)、Time(HHH:MI:SS)
	字符串转换为日期 cast('yyyy-mm-dd...')：select cast('2018-09-17 15:30:00' as datetime);
	格式化日期字符串 str_to_date(str,format)：
	%M 月名称（1月-12月）、%m 月序号（01-12）、%d 日序号（01-31）、%j 日在一年中的序号（001-366）、%W 星期名称（星期日-星期六）、%Y 4位数字表示的年份、%H 小时（00-23）、%h 小时（01-12）、%i 分钟（00-59）、%s 秒钟（00-59）、%f 微妙（000000-999999）、%p A.M 或 P.M
	UPDATE individual SET birth_date = STR_TO_DATE('September 17, 2008', '%m %d %Y') WHERE cust_id = 999;

	当前日期时间：
	SELECT CURRENT_DATE(), CURRENT_TIME(), CURRENT_TIMESTAMP(); //Oracle没有current_time，sqlServer只有current_timestamp函数

	MySQL计算日期的函数 DATE_ADD (d,INTERVAL expr type)函数，为指定日期增加任意一段时间间隔(如天、月、年)，并产生另一个日期：

	SELECT DATE_ADD(CURRENT_DATE(), INTERVAL 5 DATY); //第二个参数包含3个元素，interval关键字，所需增加时间间隔、时间间隔类型
	//常用的时间间隔类型 Second（秒数）、Minute（分钟数）、Hour（小时数）、Day（天数）、Month（月份）、Year（年份）、Minute_second（分钟数和秒数，中间用‘：’隔开）、Hour_second（小时数、分钟数和秒数，中间用‘：’隔开）、Year_month（年份和月份，中间用‘：’隔开）

	interval()函数,进行比较列表(N，N1，N2，N3等等)中的N值。该函数如果N<N1返回0，如果N<N2返回1，如果N<N3返回2 等等。如果N为NULL，它将返回-1。列表值必须是N1<N2<N3的形式才能正常工作：
	SELECT INTERVAL(6,1,2,3,4,5,6,7,8,9,1); // 6 -- 返回比N=6大的位置索引

	last_day()获取当月的最后一天

	将time值转换时区 convert_tz() ：
	SELECT CURRENT_TIMESTAMP() current_est, CONVERT_TZ(CURRENT_TIMESTAMP(), 'US/Eastern', 'UTC') current_utc;//将本地时间转换为UTC时间，Oracle使用new_time


	确定某一个日期是星期几：
	SELECT DAYNAME('2018-09-18'); 

	提取日期值中的信息 extract() 函数，时间间隔类型同date_add：
	SELECT EXTRACT(YEAR FROM '2018-09-18 22：19：05');

	获取两个日期将的天数datediff()：SELECT DATEDIFF('2009-09-03', '2009-06-24');

	cast()函数其它用法：将字符串转换为整数: SELECT CAST('123' AS SIGNED INTERGER);	 


54、分组与聚集
	SELECT open_emp_id FROM acount;
	SELECT open_emp_id FROM acount GROUP BY open_emp_id;
	SELECT open_emp_id, COUNT(*) how_many FROM acount GROUP BY open_emp_id; //*号表示对分组所有列进行计数
	SELECT open_emp_id, COUNT(*) how_many FROM acount GROUP BY open_emp_id HAVING COUNT(*) > 4; //不能再where中进行条件判断，因为评估where子句时分组还未被创建

	聚集函数：
	聚集函数对某个分组的所有行执行特定操作：
	Max（）返回集合中的最大值
	Min（）返回集合中的最小值
	Avg（）返回集合中的平均值
	Sum（）返回集合中的所有值得和
	Count（）返回集合中的值得个数

	例：
	SELECT COUNT(open_id) FROM account;
	SELECT COUNT(DISTINCT open_id) FROM account;//使用distinct
	SELECT MAX(pend_balance - avail_balance) max_uncleared FROM account;//使用表达式
	SELECT EXTRACT(YEAR FROM start_date) year, COUNT(*) how_many FROM employee GROUP BY EXTRACT(YEAR FROM start_date);//利用表达式分组

	demo:为每种产品/支行组合计算余额的同时，还需要为每种产品单独计算合计数
	SELECT product_cd, open_branch_id, SUM(avail_balance) tot_balance FROM account GROUP BY product_cd, open_branch_id WITH ROLLUP;
	//Oracle用法：SELECT product_cd, open_branch_id, SUM(avail_balance) tot_balance FROM account GROUP BY ROLLUP(product_cd, open_branch_id);
	如果处理产品合计，还需要为每个支行计算合计，使用with cube选项，它可以为分组列所有可能的组合产生合计行。但MySql6.0版不支持with cube，SqlServer和Oracle数据库中可以使用：
	SELECT product_cd, open_branch_id, SUM(avail_balance) tot_balance FROM account GROUP BY product_cd, open_branch_id WITH CUBE;
	//Oracle用法：SELECT product_cd, open_branch_id, SUM(avail_balance) tot_balance FROM account GROUP BY CUBE(product_cd, open_branch_id);

	分组过滤：当分组数据时，也可以在产生分组后对数据应用过滤条件，having子句就是放置这类过滤条件的地方
	SELECT product_cd, SUM(avail_balance) prod_balance FROM account WHERE status = 'ACTIVE' GROUP BY product_cd HAVING SUM(avail_balace) >= 10000;//where子句过滤掉不活动的账户，having子句过滤掉余额合计小于$10000的产品

	注意：当在包含 group by 子句的查询中增加过滤条件时，需要仔细考虑过滤是针对原始数据（此时过滤条件应放到 where 子句中），还是针对分组后的数据（此时过滤条件应放到 having 子句中）
	where子句中不能包含聚合函数（如：SUM()）

	此外，还可以在having子句中包含未在select语句中出现的聚合函数：
	SELECT product_cd, SUM(avail_balance) prod_balance FROM account WHERE status = 'ACTIVE' GROUP BY product_cd HAVING MIN(avail_balace) >= 1000 AND MAX(avail_balace) <= 10000;

55、子查询（临时表，服务器在 sql 语句执行结束后将清空子查询结果所占的内存）
	where中常用运算符：=、<>、>、<、<=、>=、in、not in、or、and、all、any、is not null、is null

	all需要和运算符配合使用，只有与集合中所有成员比较都成立时条件才为真：
	SELECT emp_id, fname, lname, title FROM employee WHERE emp_id <> ALL (SELECT superior_emp_id FROM employee WHERE superior_emp_id IS NOT NULL);

	any将一个值与值集中每个成员相比较，只要有一个比较成立，则条件为真（any 与 in 等效）:
	SELECT account_id, cust_id, product_cd, avail_balance FROM account WHERE avail_balance > ANY (SELECT a.avail_balance FROM account a INNER JOIN individual i ON a.cust_id = i.cust_id WHERE i.fname = 'Frank' AND i.lanme = 'Trucker');

	关联子查询：
	SELECT c.cust_id, c.cust_type_cd, c.city FROM customer c WHERE 2 = (SELECT COUNT(*) FROM account a WHERE a.cust_id = c.cust_id);
	SELECT c.cust_id, c.cust_type_cd, c.city FROM customer c WHERE (SELECT SUM(a.avail_balance) FROM account a WHERE a.cust_id = c.cust_id) BETWEEN 5000 AND 10000;

	exists 和 not exists，只关心存在关系而不在乎数量:
	SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance FROM account a WHERE EXISTS (SELECT 1 FROM transaction t WHERE t.account_id = a.account_id AND t.txn_date = '2008-09-22');
	子查询可能回访0,1或者多行结果，然而条件只是简单地检查子查询能否返回至少一行。子查询可以返回任何自己喜欢的结果（不过，惯例是 select 1 或者 select *）：
	SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance FROM account a WHERE EXISTS (SELECT t.txn_id, 'hello', 3.1414927 FROM transaction t WHERE t.account_id = a.account_id AND t.txn_date = '2008-09-22');

	not exists:
	SELECT a.account_id, a.product_c, a.cust_id FROM account a WHERE NOT EXISTS (SELECT 1 FROM business b WHERE b.cust_id = a.cust_id);

	在update、delete、insert中使用关联子查询：
	查找每隔账户的最新交易日期，再修改account表中的每一行的last_activity_date列的值：
	UPDATE account a SET a.last_activity_date = (SELECT MAX(t.txn_date) FROM transaction t WHERE t.account_id = a.account_id);
	在修改last_activity_date之前检查每个账户是否发生过交易，否则，如果子查询不返回任何行，last_activity_date列的值将被修改为null：
	UPDATE account a SET a.last_activity_date = (SELECT MAX(t.txn_date) FROM transaction t WHERE t.account_id = a.account_id) WHERE EXISTS (SELECT 1 FROM transaction t WHERE t.account_id = a.account_id);//除select子句外，这两个关联子查询相同，不过，set子句的子查询仅当update语句中where子句为真时才执行，这样就可以保护last_activity_date列不被null重写

	delete，在delete语句使用关联子查询时，无论如何都不能使用表别名：
	DELETE FROM department WHERE NOT EXISTS (SELECT 1 FROM 	employee WHERE employee.dept_id = department.dept_id);

	子查询作为数据源：
	SELECT d.dept_id, d.name, e_cnt.how_many num_employees FROM department d INNER JOIN (SELECT dept_id, COUNT(*) how_many FROM employee GROUPED BY dept_id) e_cnt ON d.dept_id = e_cnt.dept_id; //子查询被命名为 e_cnt， 并且用dept_id列e_cnt与department表连接，然后包含查询从department表检索出部门ID、名称以及来自e_cnt子查询的雇员数

	使用子查询创建虚拟表：
	SELECT 'Small Fry' name, 0 low_limit, 4999.99 high_limit 
	UNION ALL
	SELECT 'Average Joes' name, 5000 low_limit, 9999.99 high_limit 
	UNION ALL
	SELECT 'Heavy Hitters' name, 10000 low_limit, 9999999.99 high_limit;

56、case查找型表达式：
	SELECT c.cust_id, c.fed_id,
		CASE 
		  WHEN c.cust_type_cd = 'I' 
		    THEN ( SELECT CONCAT( i.fname, ' ', i.lanme ) FROM individual i WHERE i.cust_id = c.cust_id )
		  WHEN c.cust_type_cd = 'B' 
		  	THEN ( SELECT b.fname FROM business b WHERE b.cust_id = c.cust_id )
		  ELSE 'Unknown'
		END name
	FROM customer c;

	简单的case表达式：
	//简单case表达式没有查找性case表达式强大，因为简单 case表达式自动构建了等式条件，不是读者自己指定的条件
	CASE customer.cust_type_cd
	  WHEN 'I' THEN
	    (SELECT CONCAT(i.fname, ' ', i.lname) FROM individual I WHERE i.cust_id = customer.cust_id)
	  WHEN 'B' THEN
	  	(SELECT b.fname FROM business b WHERE b.cust_id = customer.cust_id)
	  ELSE 'Unknown Customer Type'
	END

	选择性聚合：
	SELECT CONCAT('ALERT! : aCCOUNT #', a.account_id, ' Has Incorrect Balance!)
	FORM account a
	WHERE (a.avail_balance, a.pending_balance) <>
	(SELECT
	   SUM(CASE
	         WHEN t.funds_avail_date > CURRENT_TIMESTAMP()
	           THEN 0
	         WHEN t.txn_type_cd = 'DBT'
	           THEN t.amount * -1
	         ELSE t.amount
	        END),
	   SUM(CASE
	         WHEN t.txn_type_cd = 'DBT'
	           THEN t.amount * -1
	         ELSE t.amount
	       END)
	FROM transaction t
	WHERE t.account_id = a.account_id);

	存在性检查：
	//查询某个客户是否有支票账户或储蓄账户，并不关心每隔类型的账户是否多余一个
	SELECT c.cust_id, c.fed_id, c.cust_type_cd,
	 CASE 
	   WHEN EXISTS (SELECT 1 FROM account a WHERE a.cust_id = c.cust_id AND a.product_cd = 'CHK')
	    THEN 'Y'
	   ELSE 'N' 
	 END has_checking,
	 CASE 	
	   WHEN EXISTS (SELECT 1 FROM account a WHERE a.cust_id = c.cust_id AND a.product_cd = 'SAV')
	    THEN 'Y'
	   ELSE 'N' 
	 END has_savings
	FROM customer c;

	//使用简单的case表达试为每个客户计算账户数目
	SELECT c.cust_id, c.fed_id, c.cust_type_cd,
	 CASE (SELECT COUNT(*) FROM account a WHERE a.cust_id = c.cust_id)
	   WHEN 0 THEN 'None'
	   WHEN 1 THEN '1'
	   WHEN 2 THEN '2'
	   ELSE '3+'
	 END num_accounts
	FROM customer c;

	//除0错误
	SELECT 100/0; 在MySql中会将结果置为 Null
	//为了保证计算不遇到错误或者其它更糟糕的情况，也不会被莫名其妙置为 null 值，需要将分母包装到条件逻辑里
	SELECT a.cust_id, a.product_cd, a.avail_balance / 
	  CASE 
	    WHEN prod_tots.tot_balance = 0 
	     THEN 1
	    ELSE prod_tots.tot_balance
	  END percent_of_total
	FROM account a 
	INNER JOIN
	 (SELECT a.product_cd, SUM(a.avail_balance) tot_balance FROM account a GROUP BY a.product_cd) prod_tots
	ON a.product_cd = prod_tots.product_cd;

	case用法示例（1）：
	select d.id,d.report_reason,
    case  
       when d.type = 1 then
         a.article_title  
       when d.type = 2 then
         b.ques_title 
			 when d.type = 3 then
			   c.answer 
    end title
	from  fs_article_report d  
	left join  fs_article  a
	on  a.id=d.article_id 
	left join  fs_question b
	on   b.id=d.article_id 
	left join  fs_answer c
	on  c.id=d.article_id

	case用法示例（2）：
	select d.*,
	case 
	when d.type=1 then 
	(select a.article_title  from fs_article a where  a.id = d.article_id)
	when d.type=2 then 
	(select b.ques_title from fs_question b where b.id = d.article_id)	
	when d.type=3 then 
	(select c.answer from fs_answer c where c.id = d.article_id)
	end txt
	from  fs_article_report d 

57、锁
	锁是数据库服务器用来控制数据资源被并行使用的一种机制。当数据库的一些内容被锁定时，任何打算修改（或者可能是读取）这个数据的用户必须等到锁被释放。大部分数据库使用下面两种锁策略之一：
		1）数据库的写操作必须向服务器申请并获得写锁才能修改数据，而读操作必须申请和获得读锁才能查询数据。多用户可以同时读取数据，而一个表（获取其它部分）一次只能分配一个写锁，并且拒绝读请求直至写锁释放。(SqlServer, Mysql)
		2）数据库的写操作必须向服务器申请并获得写锁才能修改数据，而读操作不需要任何类型的锁就可以查询数据。另一方面服务器要保证从查询开始到结束读操作看到一个一致的数据视图（即使其它用户修改，数据看上去也要相同）。这个方法称为版本控制(Oracle, Mysql)

	锁粒度：
	表锁：阻止多用户同时修改同一个表的数据（SqlServer、MySql）
	页锁：阻止多用户同时修改某表中同一页（一页通常是一段 2-16KB 的内存空间）的数据（SqlServer、MySql、Oracle）
	行锁：阻止多用户同时修改某表中同一行数据（SqlServer、MySql）

	MySql使用哪种锁和锁粒度取决于存取引擎的选择

58、 事务
	将多条 SQL 语句聚集到一起，并且能够实现要么所有语句都执行，要么一个都不执行（这个属性称为原子性）
	如启动一个事务，尝试从储蓄账户中移走￥500 并添加到支票账户，如果一切顺利，事务将被提交，如果出现了错误，事务将被回滚，这意味着将撤销自事务开始的所有数据变化
	通使用事务，程序可以确保5￥00要么在储蓄账户，要么转移到支票账户，而不可能出什么意外。不管事务提交了还是回滚了，执行时获得的资源（比如写锁）在事务完成后都会被释放
	当然，如果程序设法完成了两个update语句后，还没执行commit或rollback命令，服务器突然宕机了，那么事务会在服务器重新上线后被回滚（数据库服务器上线前必须完成的任务之一就是查找宕机前正在运行但未完成的事务，并将其回滚）。此外，如果程序完成了事务，并发出了commit命令，还没有将变化持久化到存储区（也就是说，修改数据还位于内存，但没有被刷新到新磁盘），服务器就宕机了，那么服务器重启时数据库服务器必须重新应用事务变换（这种属性称为持久性）。

	结束事务：
	除了提交 commit 或 rollback 指令，介绍事务还可以由其它情景出发，要么作为活动的间接结果，要么作为意外的结果：
		1）服务器宕机，在这种情况下，服务器重启时事务将会被自动回滚
		2）提交一个SQL模式的语句，比如 alter table，这将会引起当前事务提交和一个新事务启动
		3）提交另一个start transaction命令，将会引起前一个事务提交
		4）因为服务器检测到一个死锁并且确定当前事务就是罪魁祸首，那么服务器就会提前结束当前的事务，这种情况下，事务将会被回滚，同时释放错误消息(MySql会返回error #1213)

	事务保存点：
	 在某些情况下，可能会遇到一些问题需要回滚事务，但是并不想撤销所有做过的工作。此时，可以在事务内创建一个或多个保存点，这样就可以利用它们回滚到事务的特定位置而不必一路回滚到事务启动状态

	 选择存储引擎：
	 	当使用Oracle、SqlServer时，数据库都有单独的一套代码负责低级别数据库操作，比如用主键值从表中检索一个特定行。不过。Mysql数据库服务器被设计成可以用多个存储引擎提供低级别的数据库功能，比如资源锁定和事务管理。6.0版本的MySql包括以下存储引擎：

	 	MyISAM：一种采用表级索定的非事务引擎
	 	MEMORY：一种内存表使用的非事务引擎
	 	BDB：一种采用页级索定的事务引擎
	 	InnoDB：一种采用行级索定的事务引擎
	 	Maria：6.0.6版本中MyISAM替代品，它添加了充分恢复功能
	 	FaIcon：6.0.4版本引入的采用行级索定的高性能事务引擎
	 	Archive：一种用于存储大量未索引数据的专用引擎，主要用来存档

	查看表的引擎：SHOW TABLE STATUS LIKE 'transaction' \G;
	为表指定引擎：ALTER TABLE transaction ENGINE = INNODB;
	创建一个保存点：SAVEPOINT my_savepoint;
	回滚到一个特定保存点：ROLLBACK TO SAVEPOINT my_savepoint;
	如：
		START TRANSACTION;

		UPDATE product SET date_retired = CURRENT_TIMESTAMP() WHERE product_cd = 'xyz';

		SAVEPOINT before_close_accounts;

		SET status = 'CLOSED', close_date = CURRENT_TIMESTAMP(), last_activity_date = CURRENT_TIMESTAMP() WHERE product_cd = 'xyz';

		ROLLBACK TO SAVEPOINT before_close_accounts;

		COMMIT;

59、索引和约束
	创建索引：ALTER TABLE department ADD INDEX dept_name_idx (name);
	查看索引：SHOW INDEX FROM department \G;
	删除索引：ALTER TABLE department DROP INDEX dept_name_idx;

	唯一索引：
	除了提供常规索引的所有好处，还作为一种机制限制索引列出现重复值，无论是插入一行还是修改索引列，数据库服务器都会检查唯一索引可以判断该值是否已经存在于本表的某一行
	ALTER TABLE department ADD UNIQUE dept_name_idx (name);

	多列索引：
	创建跨越多列的索引
	ALTER TABLE employee ADD INDEX emp_names_idx (lname, fname);

	文本索引：
	如果数据库中存储问答，那么可能需要允许用户在文档中查找单词或者短语，我们当然不希望每次请求搜索是服务器都打开每个文档，然后扫描需要的文本，但是传统的索引策略又不适用于这种情况，所以使用全文索引，MySql 中仅 MyISAM 存储引擎中可以使用全文索引

	索引的不足：
	每个索引事实上都是一个表（一种特殊类型的表，但也是表），因此，每次在读表添加或者删除行时，表中所有索引必须被修改，当更新行时，受到影响的列的任何索引也必须被修改。因此，索引越多，服务器就需要做越多的工作来保持模式对象最新，当然，这将会拖慢服务器处理任务的速度。
	索引需要磁盘空间、同时也需要管理员耗费一些精力去管理它们，因此对于索引的最佳策略是：
	  仅当出现清晰需求时才添加索引。
	如果有特殊目的需要索引，比如每月例行维护程序，那么就可以添加索引，运行程序，然后删除索引，下次需要时再如此重发一遍。对于数据仓库来说，用户在营业期间生成报表和特定查询时，索引至关重要，但是当数据被彻夜装载到数据仓库时，就会出现问题，所以一种常见的做法是：
	  装载数据前提前删除索引，然后在仓库开放营业前重建它们
	一般来说，应该努力避免使用太多索引和太少索引。如果不能确定到底需要多少索引，读者可以将下面的内容作为默认策略使用。
	1、确保所有主键列被索引（大本分服务器会在创建主键约束时自动生成唯一索引）。针对多列主键，考虑为主键列构建附件索引，或者以与主键约束定义不    同的顺序为所有主键列另外生成索引
	2、为所有被外键约束引用的列创建索引。服务器在准备删除父行时会查找以确保没有子行存在，为此它必须发出一个查询搜索列中的特定值，如果该列没有	索引，那么服务器必须扫描整个表
	3、索引那些被频繁检索的列。除了短字符串（3~50个字符）列，大多数日期列也是不错的候选。

	约束：
	约束是一种简单地强加于表中一列或多列的限制。

	约束类型：

	主键约束：
		标志一列或多列，并保证其值在表内的唯一性

	外键约束：
		限制一列或多列中的值必须被包含在另一表的外键列中，并且级联更新或级联删除规则建立后也可以限制其他表中的可用值。

	唯一约束约束：
		限制一列或多列的值，保证其在表内的唯一性（主键约束是一种特殊类型的唯一约束）

	检查约束：
		限制一列的可用值范围

	创建约束：
		ALTER TABLE product ADD CONSTRAINT pk_product PRIMARY KEY (product_cd);
		ALTER TABLE product(外键子表) ADD CONSTRAINT fk_product_type_cd FOREIGN KEY (product_type_cd) REFERENCES product_type(外键父表) (product_type_cd);

	外键级联更新：
		ALTER TABLE product DROP FOREIGN KEY fk_product_type_cd;
		ALTER TABLE product ADD CONSTRAINT fk_product_type_cd FOREIGN KEY (product_type_cd) REFERENCES product_type (product_type_cd) ON UPDATE CASCADE;

	外键级联删除：
		ALTER TABLE product ADD CONSTRAINT fk_product_type_cd FOREIGN KEY (product_type_cd) REFERENCES product_type (product_type_cd) ON UPDATE CASCADE ON CASCADE;


60、explain语句，请求服务器显示查询的执行计划

61、数据库元数据
	查询数据库中表/视图名字和表类型

	动态 SQL：prepare、execute、deallocate

	SET @qry = 'SELECT cust_id, cust_type_cd, fed_id FROM customer'; //设置字符串变量
	PREPARY dynsql FROM @qry; //将qry语句提交给数据库引擎
	EXECUTE dynsql; //执行语句
	DEALLOCATE PREPARE dynsl; //关闭prepare语句，释放执行中使用的所有数据库资源

	通过在查询中包含占位符，也可以在运行时动态指定条件：
	SET @qry = 'SELECT cust_id, cust_type_cd, fed_id FROM customer WHERE cust_id = ?';
	PREPARY dynsql FROM @qry;
	SET @custid = 1;
	EXECUTE dynsql UNSIGN @custid;
	SET @custid = 2;
	EXECUTE dynsql UNSIGN @custid;
	DEALLOCATE PREPARE dynsl;







	

	

